<?xml version="1.0" encoding="UTF-8"?>
<!-- Mapper XML 설정 태그 -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace -->
<mapper namespace="com.eatplatform.web.persistence.StoreMapper">

	<resultMap type="com.eatplatform.web.domain.StoreVO"
		id="StoreResultMap">
		<id property="storeId" column="STORE_ID"/>
		<result property="storeUserId" column="STORE_USER_ID" />
		<result property="storeName" column="STORE_NAME" />
		<result property="storePhone" column="STORE_PHONE" />
		<result property="ownerName" column="OWNER_NAME" />
		<result property="reservLimit" column="RESERV_LIMIT" />
		<result property="seat" column="SEAT" />
		<result property="businessHour" column="BUSINESS_HOUR" />
		<result property="storeComment" column="STORE_COMMENT" />
		<result property="description" column="DESCRIPTION" />
		<result property="storeRegDate" column="STORE_REG_DATE" />
		<result property="storeUpdateDate" column="STORE_UPDATE_DATE" />
	</resultMap>
	
	<resultMap type="com.eatplatform.web.domain.StoreCategoryVO" id="StroeCategoryResultMap">
		<id property="storeId" column="STORE_ID"/>
		<result property="mainCategoryId" column="MAIN_CATEGORY_ID" />
		<result property="subCategoryId" column="SUB_CATEGORY_ID" />
		<result property="mainCategoryName" column="MAIN_CATEGORY_NAME" />
		<result property="subCategoryName" column="SUB_CATEGORY_NAME" />
	</resultMap>

	<insert id="insertStore" parameterType="com.eatplatform.web.domain.StoreVO" useGeneratedKeys="true" keyProperty="storeId" keyColumn="STORE_ID">
		INSERT INTO STORE(
		STORE_ID, STORE_USER_ID, STORE_NAME,
		STORE_PHONE, OWNER_NAME,
		RESERV_LIMIT, SEAT,
		BUSINESS_HOUR, STORE_COMMENT, DESCRIPTION
		) VALUES (
		STORE_SEQ.NEXTVAL,
		#{storeUserId},
		#{storeName},
		#{storePhone},
		#{ownerName},
		#{reservLimit},
		#{seat},
		#{businessHour},
		#{storeComment},
		#{description}
		)
	</insert>
	
	<insert id="insertStoreCategory">
		INSERT INTO STORE_CATEGORY(
		STORE_ID, 
		MAIN_CATEGORY_ID, MAIN_CATEGORY_NAME,
		SUB_CATEGORY_ID, SUB_CATEGORY_NAME
		) VALUES (
		#{storeId},
		#{mainCategoryId},
		#{mainCategoryName},
		#{subCategoryId},
		#{subCategoryName}
		)
	</insert>

	<select id="selectStoreById" resultMap="StoreResultMap">
		SELECT *
		FROM STORE
		WHERE
		STORE_ID = #{storeId}
	</select>
	
	<select id="selectStoreListByStoreUserId" resultMap="StoreResultMap">
		SELECT * FROM (
		    SELECT ROW_NUMBER() OVER (ORDER BY STORE_ID DESC) AS RN, STORE.* FROM STORE
		    WHERE STORE_USER_ID = #{storeUserId}
		)
		WHERE RN BETWEEN #{pagination.start} AND #{pagination.end}
	</select>


	<!-- list paging 처리 -->
	<select id="getStoresWithPaging" resultMap="StoreResultMap" parameterType="java.util.Map">
	  SELECT *
	  FROM (
	    SELECT 
	      store.STORE_ID, store.STORE_NAME, store.STORE_REG_DATE, store.STORE_COMMENT, store.DESCRIPTION,
	      MAX(menu.MENU_NAME) AS MENU_NAME, MAX(menu.MENU_COMMENT) AS MENU_COMMENT,
	      ROW_NUMBER() OVER (ORDER BY store.STORE_REG_DATE DESC, store.STORE_ID DESC) AS RN
	    FROM STORE store
	    LEFT JOIN MENU menu ON store.STORE_ID = menu.STORE_ID
	    <where>
	        <if test="keywords != null and keywords.size() > 0">
	            AND (
	                <foreach collection="keywords" item="keyword" separator="OR">
	                    REPLACE(store.STORE_NAME, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	                    OR REPLACE(store.STORE_COMMENT, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	                    OR REPLACE(store.DESCRIPTION, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	                    OR (menu.MENU_NAME IS NOT NULL AND REPLACE(menu.MENU_NAME, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%')
	                    OR (menu.MENU_COMMENT IS NOT NULL AND REPLACE(menu.MENU_COMMENT, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%')
	                </foreach>
	            )
	        </if>
	    </where>
	    GROUP BY store.STORE_ID, store.STORE_NAME, store.STORE_REG_DATE, store.STORE_COMMENT, store.DESCRIPTION
	  )
	  WHERE RN &gt;= #{startRow} AND RN &lt;= #{endRow}
	</select>


	
	<!-- 전체 게시글 카운트 -->
	<select id="getTotalStoresCount" resultType="int" parameterType="java.util.Map">
	  SELECT COUNT(DISTINCT store.STORE_ID)
	  FROM STORE store
	  LEFT JOIN MENU menu ON store.STORE_ID = menu.STORE_ID
	  <where>
	      <if test="keywords != null and keywords.size() > 0">
	          AND (
	              <foreach collection="keywords" item="keyword" separator="OR">
	                  REPLACE(store.STORE_NAME, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	                  OR REPLACE(store.STORE_COMMENT, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	                  OR REPLACE(store.DESCRIPTION, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	                  OR REPLACE(menu.MENU_NAME, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	                  OR REPLACE(menu.MENU_COMMENT, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	              </foreach>
	          )
	      </if>
	  </where>
	</select>

	
	<select id="getTotalStoresCountByStoreUserId" resultType="Integer">
		SELECT COUNT(*)
		FROM STORE
		WHERE STORE_USER_ID = #{storeUserId}
	</select>

	<select id="getStoreUserIdByStoreId" parameterType="int" resultType="string">
		SELECT STORE_USER_ID
		FROM STORE
		WHERE STORE_ID = #{storeId}
	</select>
	
	<select id="getStoreIdByStoreUserId" parameterType="String" resultMap="StoreResultMap">
		SELECT STORE_ID, STORE_NAME
		FROM STORE
		WHERE STORE_USER_ID = #{storeUserId}
		ORDER BY STORE_ID ASC
	</select>
	
	<select id="getStoreNameByStoreId" parameterType="int" resultType="String">
		SELECT STORE_NAME
		FROM STORE
		WHERE STORE_ID = ${storeId}
	</select>

	<!-- 최근 6개의 매장 가져오기 -->
	<select id="getRecentStores" resultMap="StoreResultMap">
		SELECT *
		FROM (
		SELECT *
		FROM STORE
		ORDER BY STORE_REG_DATE DESC
		)
		WHERE ROWNUM &lt;= #{endRow}
		AND ROWNUM &gt;= #{startRow}
	</select>
	
	<!-- 가게 목록 조회(Pagination 사용) -->
	<select id="selectStoreWithPagination" resultMap="StoreResultMap">
		SELECT *
		FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY STORE_ID DESC) AS RN,
			* FROM STORE
		)
	</select>

	<!-- 가게 정보 수정 -->
	<update id="updateStore">
		UPDATE STORE
		SET
		STORE_NAME = #{storeName},
		STORE_PHONE
		= #{storePhone},
		OWNER_NAME = #{ownerName},
		RESERV_LIMIT = #{reservLimit},
		SEAT = #{seat},
		BUSINESS_HOUR = #{businessHour},
		STORE_COMMENT = #{storeComment},
		DESCRIPTION = #{description},
		STORE_UPDATE_DATE = CURRENT_TIMESTAMP
		WHERE STORE_ID = #{storeId}
	</update>
	
	<delete id="deleteStore">
		DELETE FROM STORE
		WHERE STORE_ID = #{storeId}
	</delete>

</mapper>